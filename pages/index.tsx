import Head from 'next/head'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import { useState, useCallback, useRef, useEffect } from 'react'
import { useWavesurfer } from '@/components/useWavesurfer'
import { WaveSurferOptions, WaveSurferEvents } from 'wavesurfer.js'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  const urls = ['https://connect3-internal.infura-ipfs.io/ipfs/bafybeiakxsr3hyxcggsy6oqgwh2vzx37ztx5zfvyzjux6ah6x6wrwsgssi',
    'https://statics-polygon-lens.s3.eu-west-1.amazonaws.com/media-snapshot/745843f4161c0abef447108b46995002c7574c8c381a6ae1a48f5751a3d4bd87.mp3']
  const [audioUrl, setAudioUrl] = useState(urls[0])

  // Swap the audio URL
  const onUrlChange = useCallback(() => {
    urls.reverse()
    setAudioUrl(urls[0])
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // Render the wavesurfer component
  // and a button to load a different audio file
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className='bg-gray-200 w-screen h-screen overflow-hidden'>

        <button className='p-4 m-4 bg-white' onClick={onUrlChange}>切歌</button>
        <WaveSurferPlayer
          height={100}
          waveColor="rgb(200, 0, 200)"
          progressColor="rgb(100, 0, 100)"
          autoplay={true}
          url={audioUrl}
        />
      </main>
    </>
  )
}



const WaveSurferPlayer = (props: Omit<WaveSurferOptions, 'container'>) => {
  const containerRef = useRef<HTMLDivElement>(null)
  // const [isPlaying, setIsPlaying] = useState(false)
  const [currentTime, setCurrentTime] = useState(0)
  const wavesurfer = useWavesurfer(containerRef, props)

  const [logs, setLogs] = useState(['init'])

  // On play button click
  // const onPlayClick = useCallback(() => {
  //   wavesurfer?.isPlaying() ? wavesurfer.pause() : wavesurfer?.play()
  // }, [wavesurfer])

  // Initialize wavesurfer when the container mounts
  // or any of the props change
  useEffect(() => {
    if (!wavesurfer) return

    setCurrentTime(0)
    // setIsPlaying(false)

    const onE = (event: keyof WaveSurferEvents) => {
      return wavesurfer.on(event, () => { setLogs(prev => [...prev, event]) })
    }

    onE('ready')
    // wavesurfer.on('ready', () => wavesurfer.play())
    onE('load')
    onE('scroll')
    onE('seeking')
    onE('play')
    onE('pause')
    onE('decode')
    onE('finish')

    wavesurfer.play()
    console.log('play')
    wavesurfer.on('timeupdate', (currentTime: number) => setCurrentTime(currentTime))

    return () => {
      // @ts-ignore
      wavesurfer.unAll()
    }
  }, [wavesurfer])

  return (
    <div className='w-full p-4 flex flex-col gap-4'>
      <div ref={containerRef} style={{ minHeight: '120px' }} />

      {/* <button className='p-3 m-4 bg-white' onClick={onPlayClick} style={{ marginTop: '1em' }}> */}
      {/*   {isPlaying ? 'Pause' : 'Play'} */}
      {/* </button> */}
      <button className='p-4 bg-white' onClick={() => wavesurfer?.playPause()}>play / pause</button>

      <p>Seconds played: {currentTime}</p>

      <p>events:</p>
      <div className='w-full h-[400px] overflow-y-scroll bg-gray-300 text-yellow-700 p-4'>
        {
          logs.map((log, index) => (<p key={index}>{log}</p>))
        }
      </div>

    </div>
  )
}
